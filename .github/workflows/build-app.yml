# 在主分支上构建
name: build-app
on:
  push: # push 触发
    branches:
      - pre-release

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: clean deployment
        uses: strumwolf/delete-deployment-environment@v2
        with:
          token: ${{ secrets.TOKEN }}
          environment: github-pages
          onlyRemoveDeployments: true

  init:
    name: 初始化构建
    runs-on: ubuntu-latest
    needs: cleanup
    outputs:
      version: ${{ steps.step_init.outputs.VERSION }}
      message: ${{ steps.prev_commit.outputs.PREV_COMMIT_MESSAGE }}
    steps:
      # 拉取代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 3
      # 初始化一些流程需要的环境变量
      - name: Init Env
        id: step_init
        run: echo VERSION=$(node -p "require('./package.json').version") >> $GITHUB_OUTPUT

      # 获取上一个提交的信息
      - name: Get prev commit
        id: prev_commit
        run: |
          {
            echo 'PREV_COMMIT_MESSAGE<<EOF'
            git log -1 --pretty=%B HEAD~1
            echo EOF
          } >> "$GITHUB_OUTPUT"

  build-root-web:
    name: 构建 Web 版本（根目录）
    runs-on: ubuntu-latest
    needs: init

    steps:
      # 拉取代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      # 设置 Node.js 版本
      - name: Load Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      # 更新依赖
      - name: Install
        run: yarn
      # 构建
      - name: Build
        run: yarn build

      # 将 dist 目录压缩为 zip
      - name: Zip
        run: zip -r Stapxs.QQ.Lite-${{ needs.init.outputs.version }}-web.zip dist

      # 上传构建结果
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.init.outputs.version }}-web
          path: Stapxs.QQ.Lite-${{ needs.init.outputs.version }}-web.zip

  build-pages:
    name: 构建 Github Pages 版本
    runs-on: ubuntu-latest
    needs: init
    steps:
      # 拉取代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      # 设置 Node.js 版本
      - name: Load Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      # 更新依赖
      - name: Install
        run: yarn
      # 构建
      - name: Build
        run: yarn build
        env:
          BUILD_ENV: github-actions

      # 部署 Web 版本
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.TOKEN }}
          branch: gh-pages
          folder: dist

  build-electron:
    name: 构建 Electron 版本
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-latest]
    outputs:
      version: ${{ needs.init.outputs.version }}

    needs: init

    steps:
      # 拉取代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      # 设置 Node.js 版本
      - name: Load Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      # 更新依赖
      - name: Install
        run: yarn

      # 构建 electron 版本（Windows）
      - name: Build Electron (Windows)
        if: matrix.os == 'windows-2019'
        run: yarn build:win
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
      # 构建 electron 版本（Linux）
      - name: Install Dependencies for Packaging (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y libarchive-tools
      - name: Build Electron (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: yarn build:linux
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}

      # 上传构建结果
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.init.outputs.version }}-${{ matrix.os }}
          path: dist_electron

  release:
    name: 发布构建结果
    runs-on: ubuntu-latest
    needs:
      - build-root-web
      - build-electron
      - init
    steps:
      # 下载构建结果
      - name: Download Artifacts
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          path: ${{ needs.build-electron.outputs.version }}
          pattern: ${{ needs.build-electron.outputs.version }}-*
          merge-multiple: true
      - name: Artifacts List
        run: ls -R
      # 发布构建结果
      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./${{ needs.build-electron.outputs.version }}/*
          tag_name: v${{ needs.build-electron.outputs.version }}
          body: |
            ## 自动构建
            由 GitHub Actions 自动构建并发布。
            ## 来自上游的更新内容
            ${{ needs.init.outputs.message }}
            ## 构建时间
            ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false
          token: ${{ secrets.TOKEN }}
